{"remainingRequest":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\src\\auth\\authguard.js","dependencies":[{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\src\\auth\\authguard.js","mtime":1619908030872},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1619908227131},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1619908226782},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\eslint-loader\\index.js","mtime":1619908277030}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZ2V0SW5zdGFuY2UgfSBmcm9tICcuL2luZGV4JzsKZXhwb3J0IHZhciBhdXRoR3VhcmQgPSBmdW5jdGlvbiBhdXRoR3VhcmQodG8sIGZyb20sIG5leHQpIHsKICB2YXIgYXV0aFNlcnZpY2UgPSBnZXRJbnN0YW5jZSgpOwoKICB2YXIgZm4gPSBmdW5jdGlvbiBmbigpIHsKICAgIC8vIElmIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0ZWQsIGNvbnRpbnVlIHdpdGggdGhlIHJvdXRlCiAgICBpZiAoYXV0aFNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKSB7CiAgICAgIHJldHVybiBuZXh0KCk7CiAgICB9IC8vIE90aGVyd2lzZSwgbG9nIGluCgoKICAgIGF1dGhTZXJ2aWNlLmxvZ2luV2l0aFJlZGlyZWN0KHsKICAgICAgYXBwU3RhdGU6IHsKICAgICAgICB0YXJnZXRVcmw6IHRvLmZ1bGxQYXRoCiAgICAgIH0KICAgIH0pOwogIH07IC8vIElmIGxvYWRpbmcgaGFzIGFscmVhZHkgZmluaXNoZWQsIGNoZWNrIG91ciBhdXRoIHN0YXRlIHVzaW5nIGBmbigpYAoKCiAgaWYgKCFhdXRoU2VydmljZS5sb2FkaW5nKSB7CiAgICByZXR1cm4gZm4oKTsKICB9IC8vIFdhdGNoIGZvciB0aGUgbG9hZGluZyBwcm9wZXJ0eSB0byBjaGFuZ2UgYmVmb3JlIHdlIGNoZWNrIGlzQXV0aGVudGljYXRlZAoKCiAgYXV0aFNlcnZpY2UuJHdhdGNoKCdsb2FkaW5nJywgZnVuY3Rpb24gKGxvYWRpbmcpIHsKICAgIGlmIChsb2FkaW5nID09PSBmYWxzZSkgewogICAgICByZXR1cm4gZm4oKTsKICAgIH0KICB9KTsKfTs="},{"version":3,"sources":["C:/Users/asolu/Desktop/MSU_Denver/Spring_2021/Technical_Software_Proj/Granular_Softwar_Solutions/Granular%20Software%20Solutions/client/src/auth/authguard.js"],"names":["getInstance","authGuard","to","from","next","authService","fn","isAuthenticated","loginWithRedirect","appState","targetUrl","fullPath","loading","$watch"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACzC,MAAMC,WAAW,GAAGL,WAAW,EAA/B;;AAEA,MAAMM,EAAE,GAAG,SAALA,EAAK,GAAM;AACjB;AACI,QAAID,WAAW,CAACE,eAAhB,EAAgC;AAC5B,aAAOH,IAAI,EAAX;AACH,KAJY,CAMb;;;AACAC,IAAAA,WAAW,CAACG,iBAAZ,CAA8B;AAAEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,SAAS,EAAER,EAAE,CAACS;AAAhB;AAAZ,KAA9B;AACH,GARD,CAHyC,CAazC;;;AACA,MAAI,CAACN,WAAW,CAACO,OAAjB,EAAyB;AACrB,WAAON,EAAE,EAAT;AACH,GAhBwC,CAkBzC;;;AACAD,EAAAA,WAAW,CAACQ,MAAZ,CAAmB,SAAnB,EAA8B,UAAAD,OAAO,EAAI;AACrC,QAAIA,OAAO,KAAK,KAAhB,EAAsB;AAClB,aAAON,EAAE,EAAT;AACH;AACJ,GAJD;AAKH,CAxBM","sourcesContent":["import { getInstance } from './index'\r\n\r\nexport const authGuard = (to, from, next) => {\r\n    const authService = getInstance()\r\n\r\n    const fn = () => {\r\n    // If the user is authenticated, continue with the route\r\n        if (authService.isAuthenticated){\r\n            return next()\r\n        }\r\n\r\n        // Otherwise, log in\r\n        authService.loginWithRedirect({ appState: { targetUrl: to.fullPath } })\r\n    }\r\n\r\n    // If loading has already finished, check our auth state using `fn()`\r\n    if (!authService.loading){\r\n        return fn()\r\n    }\r\n\r\n    // Watch for the loading property to change before we check isAuthenticated\r\n    authService.$watch('loading', loading => {\r\n        if (loading === false){\r\n            return fn()\r\n        }\r\n    })\r\n}"]}]}