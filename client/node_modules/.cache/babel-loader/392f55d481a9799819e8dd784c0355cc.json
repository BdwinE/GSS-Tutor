{"remainingRequest":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\src\\api\\messaging\\messages.js","dependencies":[{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\src\\api\\messaging\\messages.js","mtime":1619908030864},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1619908227131},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1619908227181},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1619908226782},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\eslint-loader\\index.js","mtime":1619908277030}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/asolu/Desktop/MSU_Denver/Spring_2021/Technical_Software_Proj/Granular_Softwar_Solutions/Granular%20Software%20Solutions/client/src/api/messaging/messages.js"],"names":["api","messageApi","createMessage","creationArgs","socket","roomId","authorId","text","Promise","resolve","reject","emit","message","error","getAllMessages","filters","includeArchived","createdBefore","limit","queryParams","undefined","push","uri","length","join","request","messages","data","getMessageById","id","updateMessageById","updateArgs","updateValues","archiveMessageById","deleteMessageById"],"mappings":"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","sourcesContent":["import api from '../'\r\n\r\nconst messageApi = {\r\n    async createMessage(creationArgs){\r\n        const socket = this\r\n        const { roomId, authorId, text } = creationArgs\r\n\r\n        const message = await new Promise((resolve, reject) => {\r\n            socket.emit('CREATE_MESSAGE', { roomId, authorId, text }, ({ message, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(message)\r\n            })\r\n        })\r\n        \r\n        return message\r\n    },\r\n\r\n    async getAllMessages(filters = {}){\r\n        const { roomId, authorId, includeArchived, createdBefore, limit = 0 } = filters\r\n\r\n        const queryParams = []\r\n\r\n        if (roomId !== undefined){\r\n            queryParams.push(`roomId=${roomId}`)\r\n        }\r\n\r\n        if (authorId !== undefined){\r\n            queryParams.push(`authorId=${authorId}`)\r\n        }\r\n\r\n        if (includeArchived !== undefined){\r\n            queryParams.push(`includeArchived=${includeArchived}`)\r\n        }\r\n\r\n        if (createdBefore !== undefined){\r\n            queryParams.push(`createdBefore=${createdBefore}`)\r\n        }\r\n\r\n        if (limit !== undefined){\r\n            queryParams.push(`limit=${limit}`)\r\n        }\r\n\r\n        const uri = `api/v1/messages${!!queryParams.length ? '?' + queryParams.join('&') : ''}`\r\n\r\n        const { data: { messages } } = await api.request('get', uri)\r\n\r\n        return messages\r\n    },\r\n\r\n    async getMessageById(id){\r\n        const uri = `api/v1/messages/${id}`\r\n\r\n        const { data: { message } } = await api.request('get', uri)\r\n\r\n        return message\r\n    },\r\n\r\n    async updateMessageById(id, updateArgs){\r\n        const socket = this\r\n        const { text } = updateArgs\r\n\r\n        const message = await new Promise((resolve, reject) => {\r\n            socket.emit('UPDATE_MESSAGE', { id, updateValues: { text } }, ({ message, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(message)\r\n            })\r\n        })\r\n        \r\n        return message\r\n    },\r\n\r\n    async archiveMessageById(id){\r\n        const socket = this\r\n\r\n        const message = await new Promise((resolve, reject) => {\r\n            socket.emit('ARCHIVE_MESSAGE', { id }, ({ message, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(message)\r\n            })\r\n        })\r\n        \r\n        return message\r\n    },\r\n\r\n    async deleteMessageById(id){\r\n        const socket = this\r\n\r\n        const message = await new Promise((resolve, reject) => {\r\n            socket.emit('DELETE_MESSAGE', { id }, ({ message, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(message)\r\n            })\r\n        })\r\n        \r\n        return message\r\n    },\r\n}\r\n\r\nexport default messageApi"]}]}