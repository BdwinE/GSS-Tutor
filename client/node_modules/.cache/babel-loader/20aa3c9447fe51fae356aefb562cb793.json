{"remainingRequest":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\src\\api\\messaging\\authors.js","dependencies":[{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\src\\api\\messaging\\authors.js","mtime":1619908030864},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1619908227131},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1619908226782},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\eslint-loader\\index.js","mtime":1619908277030}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/asolu/Desktop/MSU_Denver/Spring_2021/Technical_Software_Proj/Granular_Softwar_Solutions/Granular%20Software%20Solutions/client/src/api/messaging/authors.js"],"names":["api","authorApi","createAuthor","creationArgs","_id","firstName","lastName","uri","body","request","author","data","getAllAuthors","filters","includeArchived","createdBefore","limit","queryParams","undefined","push","length","join","authors","getAuthorById","id","updateAuthorById","updateArgs","socket","Promise","resolve","reject","emit","updateValues","message","error","archiveAuthorById","deleteAuthorById"],"mappings":"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","sourcesContent":["import api from '../'\r\n\r\nconst authorApi = {\r\n    async createAuthor(creationArgs){\r\n        const { _id, firstName, lastName } = creationArgs\r\n\r\n        const uri = 'api/v1/authors'\r\n        const body = { _id, firstName, lastName }\r\n\r\n        const { data: { author } } = await api.request('post', uri)\r\n\r\n        return author\r\n    },\r\n\r\n    async getAllAuthors(filters = {}){\r\n        const { includeArchived, createdBefore, limit = 0 } = filters\r\n\r\n        const queryParams = []\r\n\r\n        if (includeArchived !== undefined){\r\n            queryParams.push(`includeArchived=${includeArchived}`)\r\n        }\r\n\r\n        if (createdBefore !== undefined){\r\n            queryParams.push(`createdBefore=${createdBefore}`)\r\n        }\r\n\r\n        if (limit !== undefined){\r\n            queryParams.push(`limit=${limit}`)\r\n        }\r\n\r\n        const uri = `api/v1/authors${!!queryParams.length ? '?' + queryParams.join('&') : ''}`\r\n\r\n        const { data: { authors } } = await api.request('get', uri)\r\n\r\n        return authors\r\n    },\r\n\r\n    async getAuthorById(id){\r\n        const uri = `api/v1/authors/${id}`\r\n\r\n        const { data: { author } } = await api.request('get', uri)\r\n\r\n        return author\r\n    },\r\n\r\n    async updateAuthorById(id, updateArgs){\r\n        const socket = this\r\n        const { firstName, lastName } = updateArgs\r\n\r\n        const message = await new Promise((resolve, reject) => {\r\n            socket.emit('UPDATE_AUTHOR', { id, updateValues: { firstName, lastName } }, \r\n                ({ message, error }) => {\r\n                    if (error) reject(error)\r\n\r\n                    resolve(message)\r\n                })\r\n        })\r\n        \r\n        return message\r\n    },\r\n\r\n    async archiveAuthorById(id){\r\n        const socket = this\r\n\r\n        const message = await new Promise((resolve, reject) => {\r\n            socket.emit('ARCHIVE_AUTHOR', { id }, ({ message, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(message)\r\n            })\r\n        })\r\n        \r\n        return message\r\n    },\r\n\r\n    async deleteAuthorById(id){\r\n        const socket = this\r\n\r\n        const message = await new Promise((resolve, reject) => {\r\n            socket.emit('DELETE_AUTHOR', { id }, ({ message, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(message)\r\n            })\r\n        })\r\n        \r\n        return message\r\n    },\r\n}\r\n\r\nexport default authorApi"]}]}