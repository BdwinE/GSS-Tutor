{"remainingRequest":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\src\\api\\messaging\\rooms.js","dependencies":[{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\src\\api\\messaging\\rooms.js","mtime":1619908030864},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1619908227131},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1619908226782},{"path":"C:\\Users\\asolu\\Desktop\\MSU_Denver\\Spring_2021\\Technical_Software_Proj\\Granular_Softwar_Solutions\\Granular%20Software%20Solutions\\client\\node_modules\\eslint-loader\\index.js","mtime":1619908277030}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/asolu/Desktop/MSU_Denver/Spring_2021/Technical_Software_Proj/Granular_Softwar_Solutions/Granular%20Software%20Solutions/client/src/api/messaging/rooms.js"],"names":["api","roomApi","createRoom","creationArgs","socket","name","authors","Promise","resolve","reject","emit","room","error","joinRoom","joinRooms","rooms","leaveRoom","leaveRooms","getAllRooms","filters","authorId","onlyActive","includeArchived","updatedBefore","limit","queryParams","undefined","push","uri","length","join","request","data","getRoomById","id","updateRoomById","updateArgs","updateValues","archiveRoomById","deleteRoomById"],"mappings":";;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,IAAMC,OAAO,GAAG;AACNC,EAAAA,UADM,sBACKC,YADL,EACkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,cAAAA,MADoB,GACX,KADW;AAElBC,cAAAA,IAFkB,GAEAF,YAFA,CAElBE,IAFkB,EAEZC,OAFY,GAEAH,YAFA,CAEZG,OAFY;AAAA;AAAA,qBAIP,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChDL,gBAAAA,MAAM,CAACM,IAAP,CAAY,aAAZ,EAA2B;AAAEL,kBAAAA,IAAI,EAAJA,IAAF;AAAQC,kBAAAA,OAAO,EAAPA;AAAR,iBAA3B,EAA8C,gBAAqB;AAAA,sBAAlBK,IAAkB,QAAlBA,IAAkB;AAAA,sBAAZC,KAAY,QAAZA,KAAY;AAC/D,sBAAIA,KAAJ,EAAWH,MAAM,CAACG,KAAD,CAAN;AAEXJ,kBAAAA,OAAO,CAACG,IAAD,CAAP;AACH,iBAJD;AAKH,eANkB,CAJO;;AAAA;AAIpBA,cAAAA,IAJoB;AAAA,+CAYnBA,IAZmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa7B,GAdW;AAgBZE,EAAAA,QAhBY,oBAgBHF,IAhBG,EAgBE;AACV,QAAMP,MAAM,GAAG,IAAf;AAEAA,IAAAA,MAAM,CAACM,IAAP,CAAY,WAAZ,EAAyBC,IAAzB;AACH,GApBW;AAsBZG,EAAAA,SAtBY,qBAsBFC,KAtBE,EAsBI;AACZ,QAAMX,MAAM,GAAG,IAAf;AAEAA,IAAAA,MAAM,CAACM,IAAP,CAAY,YAAZ,EAA0BK,KAA1B;AACH,GA1BW;AA4BZC,EAAAA,SA5BY,qBA4BFL,IA5BE,EA4BG;AACX,QAAMP,MAAM,GAAG,IAAf;AAEAA,IAAAA,MAAM,CAACM,IAAP,CAAY,YAAZ,EAA0BC,IAA1B;AACH,GAhCW;AAkCZM,EAAAA,UAlCY,sBAkCDF,KAlCC,EAkCK;AACb,QAAMX,MAAM,GAAG,IAAf;AAEAA,IAAAA,MAAM,CAACM,IAAP,CAAY,aAAZ,EAA2BK,KAA3B;AACH,GAtCW;AAwCNG,EAAAA,WAxCM,yBAwCmB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAbC,cAAAA,OAAa,0EAAH,EAAG;AACnBC,cAAAA,QADmB,GACiDD,OADjD,CACnBC,QADmB,EACTC,UADS,GACiDF,OADjD,CACTE,UADS,EACGC,eADH,GACiDH,OADjD,CACGG,eADH,EACoBC,aADpB,GACiDJ,OADjD,CACoBI,aADpB,mBACiDJ,OADjD,CACmCK,KADnC,EACmCA,KADnC,+BAC2C,CAD3C;AAGrBC,cAAAA,WAHqB,GAGP,EAHO;;AAK3B,kBAAIL,QAAQ,KAAKM,SAAjB,EAA2B;AACvBD,gBAAAA,WAAW,CAACE,IAAZ,oBAA6BP,QAA7B;AACH;;AAED,kBAAIC,UAAU,KAAKK,SAAnB,EAA6B;AACzBD,gBAAAA,WAAW,CAACE,IAAZ,sBAA+BN,UAA/B;AACH;;AAED,kBAAIC,eAAe,KAAKI,SAAxB,EAAkC;AAC9BD,gBAAAA,WAAW,CAACE,IAAZ,2BAAoCL,eAApC;AACH;;AAED,kBAAIC,aAAa,KAAKG,SAAtB,EAAgC;AAC5BD,gBAAAA,WAAW,CAACE,IAAZ,yBAAkCJ,aAAlC;AACH;;AAED,kBAAIC,KAAK,KAAKE,SAAd,EAAwB;AACpBD,gBAAAA,WAAW,CAACE,IAAZ,iBAA0BH,KAA1B;AACH;;AAEKI,cAAAA,GAzBqB,yBAyBA,CAAC,CAACH,WAAW,CAACI,MAAd,GAAuB,MAAMJ,WAAW,CAACK,IAAZ,CAAiB,GAAjB,CAA7B,GAAqD,EAzBrD;AAAA;AAAA,qBA2BO9B,GAAG,CAAC+B,OAAJ,CAAY,KAAZ,EAAmBH,GAAnB,CA3BP;;AAAA;AAAA;AA2BXb,cAAAA,KA3BW,sBA2BnBiB,IA3BmB,CA2BXjB,KA3BW;AAAA,gDA6BpBA,KA7BoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8B9B,GAtEW;AAwENkB,EAAAA,WAxEM,uBAwEMC,EAxEN,EAwES;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACXN,cAAAA,GADW,0BACWM,EADX;AAAA;AAAA,qBAGgBlC,GAAG,CAAC+B,OAAJ,CAAY,KAAZ,EAAmBH,GAAnB,CAHhB;;AAAA;AAAA;AAGDjB,cAAAA,IAHC,uBAGTqB,IAHS,CAGDrB,IAHC;AAAA,gDAKVA,IALU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMpB,GA9EW;AAgFNwB,EAAAA,cAhFM,0BAgFSD,EAhFT,EAgFaE,UAhFb,EAgFwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BhC,cAAAA,MAD0B,GACjB,MADiB;AAExBC,cAAAA,IAFwB,GAEN+B,UAFM,CAExB/B,IAFwB,EAElBC,OAFkB,GAEN8B,UAFM,CAElB9B,OAFkB;AAAA;AAAA,qBAIb,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChDL,gBAAAA,MAAM,CAACM,IAAP,CAAY,aAAZ,EAA2B;AAAEwB,kBAAAA,EAAE,EAAFA,EAAF;AAAMG,kBAAAA,YAAY,EAAE;AAAEhC,oBAAAA,IAAI,EAAJA,IAAF;AAAQC,oBAAAA,OAAO,EAAPA;AAAR;AAApB,iBAA3B,EACI,iBAAqB;AAAA,sBAAlBK,IAAkB,SAAlBA,IAAkB;AAAA,sBAAZC,KAAY,SAAZA,KAAY;AACjB,sBAAIA,KAAJ,EAAWH,MAAM,CAACG,KAAD,CAAN;AAEXJ,kBAAAA,OAAO,CAACG,IAAD,CAAP;AACH,iBALL;AAMH,eAPkB,CAJa;;AAAA;AAI1BA,cAAAA,IAJ0B;AAAA,gDAazBA,IAbyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcnC,GA9FW;AAgGN2B,EAAAA,eAhGM,2BAgGUJ,EAhGV,EAgGa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACf9B,cAAAA,MADe,GACN,MADM;AAAA;AAAA,qBAGF,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChDL,gBAAAA,MAAM,CAACM,IAAP,CAAY,cAAZ,EAA4B;AAAEwB,kBAAAA,EAAE,EAAFA;AAAF,iBAA5B,EAAoC,iBAAqB;AAAA,sBAAlBvB,IAAkB,SAAlBA,IAAkB;AAAA,sBAAZC,KAAY,SAAZA,KAAY;AACrD,sBAAIA,KAAJ,EAAWH,MAAM,CAACG,KAAD,CAAN;AAEXJ,kBAAAA,OAAO,CAACG,IAAD,CAAP;AACH,iBAJD;AAKH,eANkB,CAHE;;AAAA;AAGfA,cAAAA,IAHe;AAAA,gDAWdA,IAXc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYxB,GA5GW;AA8GN4B,EAAAA,cA9GM,0BA8GSL,EA9GT,EA8GY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACd9B,cAAAA,MADc,GACL,MADK;AAAA;AAAA,qBAGD,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChDL,gBAAAA,MAAM,CAACM,IAAP,CAAY,aAAZ,EAA2B;AAAEwB,kBAAAA,EAAE,EAAFA;AAAF,iBAA3B,EAAmC,iBAAqB;AAAA,sBAAlBvB,IAAkB,SAAlBA,IAAkB;AAAA,sBAAZC,KAAY,SAAZA,KAAY;AACpD,sBAAIA,KAAJ,EAAWH,MAAM,CAACG,KAAD,CAAN;AAEXJ,kBAAAA,OAAO,CAACG,IAAD,CAAP;AACH,iBAJD;AAKH,eANkB,CAHC;;AAAA;AAGdA,cAAAA,IAHc;AAAA,gDAWbA,IAXa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYvB;AA1HW,CAAhB;AA6HA,eAAeV,OAAf","sourcesContent":["import api from '../'\r\n\r\nconst roomApi = {\r\n    async createRoom(creationArgs){\r\n        const socket = this\r\n        const { name, authors } = creationArgs\r\n\r\n        const room = await new Promise((resolve, reject) => {\r\n            socket.emit('CREATE_ROOM', { name, authors }, ({ room, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(room)\r\n            })\r\n        })\r\n        \r\n        return room\r\n    },\r\n\r\n    joinRoom(room){\r\n        const socket = this\r\n\r\n        socket.emit('JOIN_ROOM', room)\r\n    },\r\n    \r\n    joinRooms(rooms){\r\n        const socket = this\r\n\r\n        socket.emit('JOIN_ROOMS', rooms)\r\n    },\r\n\r\n    leaveRoom(room){\r\n        const socket = this\r\n\r\n        socket.emit('LEAVE_ROOM', room)\r\n    },\r\n\r\n    leaveRooms(rooms){\r\n        const socket = this\r\n\r\n        socket.emit('LEAVE_ROOMS', rooms)\r\n    },\r\n    \r\n    async getAllRooms(filters = {}){\r\n        const { authorId, onlyActive, includeArchived, updatedBefore, limit = 0 } = filters\r\n\r\n        const queryParams = []\r\n\r\n        if (authorId !== undefined){\r\n            queryParams.push(`authorId=${authorId}`)\r\n        }\r\n\r\n        if (onlyActive !== undefined){\r\n            queryParams.push(`onlyActive=${onlyActive}`)\r\n        }\r\n\r\n        if (includeArchived !== undefined){\r\n            queryParams.push(`includeArchived=${includeArchived}`)\r\n        }\r\n\r\n        if (updatedBefore !== undefined){\r\n            queryParams.push(`updatedBefore=${updatedBefore}`)\r\n        }\r\n\r\n        if (limit !== undefined){\r\n            queryParams.push(`limit=${limit}`)\r\n        }\r\n\r\n        const uri = `api/v1/rooms${!!queryParams.length ? '?' + queryParams.join('&') : ''}`\r\n\r\n        const { data: { rooms } } = await api.request('get', uri)\r\n\r\n        return rooms\r\n    },\r\n\r\n    async getRoomById(id){\r\n        const uri = `api/v1/rooms/${id}`\r\n\r\n        const { data: { room } } = await api.request('get', uri)\r\n\r\n        return room\r\n    },\r\n\r\n    async updateRoomById(id, updateArgs){\r\n        const socket = this\r\n        const { name, authors } = updateArgs\r\n        \r\n        const room = await new Promise((resolve, reject) => {\r\n            socket.emit('UPDATE_ROOM', { id, updateValues: { name, authors } },\r\n                ({ room, error }) => {\r\n                    if (error) reject(error)\r\n\r\n                    resolve(room)\r\n                })\r\n        })\r\n        \r\n        return room\r\n    },\r\n\r\n    async archiveRoomById(id){\r\n        const socket = this\r\n\r\n        const room = await new Promise((resolve, reject) => {\r\n            socket.emit('ARCHIVE_ROOM', { id }, ({ room, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(room)\r\n            })\r\n        })\r\n        \r\n        return room\r\n    },\r\n\r\n    async deleteRoomById(id){\r\n        const socket = this\r\n\r\n        const room = await new Promise((resolve, reject) => {\r\n            socket.emit('DELETE_ROOM', { id }, ({ room, error }) => {\r\n                if (error) reject(error)\r\n\r\n                resolve(room)\r\n            })\r\n        })\r\n        \r\n        return room\r\n    },\r\n}\r\n\r\nexport default roomApi"]}]}